{"ast":null,"code":"import Matter from \"matter-js\";\nimport { getPipeSizePosPair } from \"./utils/random\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nvar windowHeight = Dimensions.get(\"window\").height;\nvar windowWidth = Dimensions.get(\"window\").width;\n\nvar Physics = function Physics(entities, _ref) {\n  var touches = _ref.touches,\n      time = _ref.time,\n      dispatch = _ref.dispatch;\n  var engine = entities.physics.engine;\n  touches.filter(function (t) {\n    return t.type === \"press\";\n  }).forEach(function (t) {\n    Matter.Body.setVelocity(entities.Bird.Body, {\n      x: 0,\n      y: -8\n    });\n  });\n  Matter.Engine.update(engine, time.delta);\n\n  for (var index = 1; index <= 2; index++) {\n    if (entities[\"ObstacleTop\" + index].body.bounds.max.x <= 0) {\n      var pipeSizePos = getPipeSizePosPair(windowWidth * 0.9);\n    }\n\n    Matter.Body.translate(entities[\"ObstacleTop\" + index].body, {\n      x: -3,\n      y: 0\n    });\n    Matter.Body.translate(entities[\"ObstacleBottom\" + index].body, {\n      x: -3,\n      y: 0\n    });\n  }\n\n  return entities;\n};\n\nexport default Physics;","map":{"version":3,"names":["Matter","getPipeSizePosPair","windowHeight","Dimensions","get","height","windowWidth","width","Physics","entities","touches","time","dispatch","engine","physics","filter","t","type","forEach","Body","setVelocity","Bird","x","y","Engine","update","delta","index","body","bounds","max","pipeSizePos","translate"],"sources":["C:/Users/HITEN/firstapp/physics.js"],"sourcesContent":["import Matter from \"matter-js\";\r\nimport { getPipeSizePosPair } from \"./utils/random\";\r\nimport { Dimensions } from \"react-native-web\";\r\nconst windowHeight = Dimensions.get(\"window\").height;\r\nconst windowWidth = Dimensions.get(\"window\").width;\r\nconst Physics = (entities, { touches, time, dispatch }) => {\r\n  let engine = entities.physics.engine;\r\n\r\n  touches\r\n    .filter((t) => t.type === \"press\")\r\n    .forEach((t) => {\r\n      Matter.Body.setVelocity(entities.Bird.Body, {\r\n        x: 0,\r\n        y: -8,\r\n      });\r\n    });\r\n  Matter.Engine.update(engine, time.delta);\r\n  for (let index = 1; index <= 2; index++) {\r\n    if (entities[`ObstacleTop${index}`].body.bounds.max.x <= 0) {\r\n      const pipeSizePos = getPipeSizePosPair(windowWidth * 0.9);\r\n    }\r\n    Matter.Body.translate(entities[`ObstacleTop${index}`].body, {\r\n      x: -3,\r\n      y: 0,\r\n    });\r\n    Matter.Body.translate(entities[`ObstacleBottom${index}`].body, {\r\n      x: -3,\r\n      y: 0,\r\n    });\r\n  }\r\n\r\n  return entities;\r\n};\r\nexport default Physics;\r\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,WAAnB;AACA,SAASC,kBAAT;;AAEA,IAAMC,YAAY,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,MAA9C;AACA,IAAMC,WAAW,GAAGH,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBG,KAA7C;;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,QAAD,QAA2C;EAAA,IAA9BC,OAA8B,QAA9BA,OAA8B;EAAA,IAArBC,IAAqB,QAArBA,IAAqB;EAAA,IAAfC,QAAe,QAAfA,QAAe;EACzD,IAAIC,MAAM,GAAGJ,QAAQ,CAACK,OAAT,CAAiBD,MAA9B;EAEAH,OAAO,CACJK,MADH,CACU,UAACC,CAAD;IAAA,OAAOA,CAAC,CAACC,IAAF,KAAW,OAAlB;EAAA,CADV,EAEGC,OAFH,CAEW,UAACF,CAAD,EAAO;IACdhB,MAAM,CAACmB,IAAP,CAAYC,WAAZ,CAAwBX,QAAQ,CAACY,IAAT,CAAcF,IAAtC,EAA4C;MAC1CG,CAAC,EAAE,CADuC;MAE1CC,CAAC,EAAE,CAAC;IAFsC,CAA5C;EAID,CAPH;EAQAvB,MAAM,CAACwB,MAAP,CAAcC,MAAd,CAAqBZ,MAArB,EAA6BF,IAAI,CAACe,KAAlC;;EACA,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,IAAI,CAA7B,EAAgCA,KAAK,EAArC,EAAyC;IACvC,IAAIlB,QAAQ,iBAAekB,KAAf,CAAR,CAAgCC,IAAhC,CAAqCC,MAArC,CAA4CC,GAA5C,CAAgDR,CAAhD,IAAqD,CAAzD,EAA4D;MAC1D,IAAMS,WAAW,GAAG9B,kBAAkB,CAACK,WAAW,GAAG,GAAf,CAAtC;IACD;;IACDN,MAAM,CAACmB,IAAP,CAAYa,SAAZ,CAAsBvB,QAAQ,iBAAekB,KAAf,CAAR,CAAgCC,IAAtD,EAA4D;MAC1DN,CAAC,EAAE,CAAC,CADsD;MAE1DC,CAAC,EAAE;IAFuD,CAA5D;IAIAvB,MAAM,CAACmB,IAAP,CAAYa,SAAZ,CAAsBvB,QAAQ,oBAAkBkB,KAAlB,CAAR,CAAmCC,IAAzD,EAA+D;MAC7DN,CAAC,EAAE,CAAC,CADyD;MAE7DC,CAAC,EAAE;IAF0D,CAA/D;EAID;;EAED,OAAOd,QAAP;AACD,CA3BD;;AA4BA,eAAeD,OAAf"},"metadata":{},"sourceType":"module"}