{"ast":null,"code":"import Matter from \"matter-js\";\nimport { getPipeSizePosPair } from \"./utils/random\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nvar windowHeight = Dimensions.get(\"window\").height;\nvar windowWidth = Dimensions.get(\"window\").width;\n\nvar Physics = function Physics(entities, _ref) {\n  var touches = _ref.touches,\n      time = _ref.time,\n      dispatch = _ref.dispatch;\n  var engine = entities.physics.engine;\n  touches.filter(function (t) {\n    return t.type === \"press\";\n  }).forEach(function (t) {\n    Matter.Body.setVelocity(entities.Bird.body, {\n      x: 0,\n      y: -8\n    });\n  });\n  Matter.Engine.update(engine, time.delta);\n\n  for (var index = 1; index <= 2; index++) {\n    if (entities[\"ObstacleTop\" + index].body.bounds.max.x <= 50 && !entities[\"ObstacleTop\" + index].point) {\n      entities[\"ObstacleTop\" + index].point = true;\n      dispatch({\n        type: \"new_point\"\n      });\n    }\n\n    if (entities[\"ObstacleTop\" + index].body.bounds.max.x <= 0) {\n      var pipeSizePos = getPipeSizePosPair(windowWidth * 0.9);\n      Matter.Body.setPosition(entities[\"ObstacleTop\" + index].body, pipeSizePos.pipeTop.pos);\n      Matter.Body.setPosition(entities[\"ObstacleBottom\" + index].body, pipeSizePos.pipeBottom.pos);\n      entities[\"ObstacleTop\" + index].point = false;\n    }\n\n    Matter.Body.translate(entities[\"ObstacleTop\" + index].body, {\n      x: -3,\n      y: 0\n    });\n    Matter.Body.translate(entities[\"ObstacleBottom\" + index].body, {\n      x: -3,\n      y: 0\n    });\n  }\n\n  Matter.Events.on(engine, \"collisionStart\", function (event) {\n    dispatch({\n      type: \"game_over\"\n    });\n  });\n  return entities;\n};\n\nexport default Physics;","map":{"version":3,"names":["Matter","getPipeSizePosPair","windowHeight","Dimensions","get","height","windowWidth","width","Physics","entities","touches","time","dispatch","engine","physics","filter","t","type","forEach","Body","setVelocity","Bird","body","x","y","Engine","update","delta","index","bounds","max","point","pipeSizePos","setPosition","pipeTop","pos","pipeBottom","translate","Events","on","event"],"sources":["C:/Users/HITEN/firstapp/physics.js"],"sourcesContent":["import Matter from \"matter-js\";\r\nimport { getPipeSizePosPair } from \"./utils/random\";\r\n\r\nimport { Dimensions } from \"react-native\";\r\n\r\nconst windowHeight = Dimensions.get(\"window\").height;\r\nconst windowWidth = Dimensions.get(\"window\").width;\r\n\r\nconst Physics = (entities, { touches, time, dispatch }) => {\r\n  let engine = entities.physics.engine;\r\n\r\n  touches\r\n    .filter((t) => t.type === \"press\")\r\n    .forEach((t) => {\r\n      Matter.Body.setVelocity(entities.Bird.body, {\r\n        x: 0,\r\n        y: -8,\r\n      });\r\n    });\r\n\r\n  Matter.Engine.update(engine, time.delta);\r\n\r\n  for (let index = 1; index <= 2; index++) {\r\n    if (\r\n      entities[`ObstacleTop${index}`].body.bounds.max.x <= 50 &&\r\n      !entities[`ObstacleTop${index}`].point\r\n    ) {\r\n      entities[`ObstacleTop${index}`].point = true;\r\n      dispatch({ type: \"new_point\" });\r\n    }\r\n\r\n    if (entities[`ObstacleTop${index}`].body.bounds.max.x <= 0) {\r\n      const pipeSizePos = getPipeSizePosPair(windowWidth * 0.9);\r\n\r\n      Matter.Body.setPosition(\r\n        entities[`ObstacleTop${index}`].body,\r\n        pipeSizePos.pipeTop.pos\r\n      );\r\n      Matter.Body.setPosition(\r\n        entities[`ObstacleBottom${index}`].body,\r\n        pipeSizePos.pipeBottom.pos\r\n      );\r\n\r\n      entities[`ObstacleTop${index}`].point = false;\r\n    }\r\n\r\n    Matter.Body.translate(entities[`ObstacleTop${index}`].body, {\r\n      x: -3,\r\n      y: 0,\r\n    });\r\n    Matter.Body.translate(entities[`ObstacleBottom${index}`].body, {\r\n      x: -3,\r\n      y: 0,\r\n    });\r\n  }\r\n\r\n  Matter.Events.on(engine, \"collisionStart\", (event) => {\r\n    dispatch({ type: \"game_over\" });\r\n  });\r\n  return entities;\r\n};\r\nexport default Physics;\r\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,WAAnB;AACA,SAASC,kBAAT;;AAIA,IAAMC,YAAY,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,MAA9C;AACA,IAAMC,WAAW,GAAGH,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBG,KAA7C;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,QAAD,QAA2C;EAAA,IAA9BC,OAA8B,QAA9BA,OAA8B;EAAA,IAArBC,IAAqB,QAArBA,IAAqB;EAAA,IAAfC,QAAe,QAAfA,QAAe;EACzD,IAAIC,MAAM,GAAGJ,QAAQ,CAACK,OAAT,CAAiBD,MAA9B;EAEAH,OAAO,CACJK,MADH,CACU,UAACC,CAAD;IAAA,OAAOA,CAAC,CAACC,IAAF,KAAW,OAAlB;EAAA,CADV,EAEGC,OAFH,CAEW,UAACF,CAAD,EAAO;IACdhB,MAAM,CAACmB,IAAP,CAAYC,WAAZ,CAAwBX,QAAQ,CAACY,IAAT,CAAcC,IAAtC,EAA4C;MAC1CC,CAAC,EAAE,CADuC;MAE1CC,CAAC,EAAE,CAAC;IAFsC,CAA5C;EAID,CAPH;EASAxB,MAAM,CAACyB,MAAP,CAAcC,MAAd,CAAqBb,MAArB,EAA6BF,IAAI,CAACgB,KAAlC;;EAEA,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,IAAI,CAA7B,EAAgCA,KAAK,EAArC,EAAyC;IACvC,IACEnB,QAAQ,iBAAemB,KAAf,CAAR,CAAgCN,IAAhC,CAAqCO,MAArC,CAA4CC,GAA5C,CAAgDP,CAAhD,IAAqD,EAArD,IACA,CAACd,QAAQ,iBAAemB,KAAf,CAAR,CAAgCG,KAFnC,EAGE;MACAtB,QAAQ,iBAAemB,KAAf,CAAR,CAAgCG,KAAhC,GAAwC,IAAxC;MACAnB,QAAQ,CAAC;QAAEK,IAAI,EAAE;MAAR,CAAD,CAAR;IACD;;IAED,IAAIR,QAAQ,iBAAemB,KAAf,CAAR,CAAgCN,IAAhC,CAAqCO,MAArC,CAA4CC,GAA5C,CAAgDP,CAAhD,IAAqD,CAAzD,EAA4D;MAC1D,IAAMS,WAAW,GAAG/B,kBAAkB,CAACK,WAAW,GAAG,GAAf,CAAtC;MAEAN,MAAM,CAACmB,IAAP,CAAYc,WAAZ,CACExB,QAAQ,iBAAemB,KAAf,CAAR,CAAgCN,IADlC,EAEEU,WAAW,CAACE,OAAZ,CAAoBC,GAFtB;MAIAnC,MAAM,CAACmB,IAAP,CAAYc,WAAZ,CACExB,QAAQ,oBAAkBmB,KAAlB,CAAR,CAAmCN,IADrC,EAEEU,WAAW,CAACI,UAAZ,CAAuBD,GAFzB;MAKA1B,QAAQ,iBAAemB,KAAf,CAAR,CAAgCG,KAAhC,GAAwC,KAAxC;IACD;;IAED/B,MAAM,CAACmB,IAAP,CAAYkB,SAAZ,CAAsB5B,QAAQ,iBAAemB,KAAf,CAAR,CAAgCN,IAAtD,EAA4D;MAC1DC,CAAC,EAAE,CAAC,CADsD;MAE1DC,CAAC,EAAE;IAFuD,CAA5D;IAIAxB,MAAM,CAACmB,IAAP,CAAYkB,SAAZ,CAAsB5B,QAAQ,oBAAkBmB,KAAlB,CAAR,CAAmCN,IAAzD,EAA+D;MAC7DC,CAAC,EAAE,CAAC,CADyD;MAE7DC,CAAC,EAAE;IAF0D,CAA/D;EAID;;EAEDxB,MAAM,CAACsC,MAAP,CAAcC,EAAd,CAAiB1B,MAAjB,EAAyB,gBAAzB,EAA2C,UAAC2B,KAAD,EAAW;IACpD5B,QAAQ,CAAC;MAAEK,IAAI,EAAE;IAAR,CAAD,CAAR;EACD,CAFD;EAGA,OAAOR,QAAP;AACD,CApDD;;AAqDA,eAAeD,OAAf"},"metadata":{},"sourceType":"module"}